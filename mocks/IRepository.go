// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	user "github.com/Robert076/auth-service/internal/user"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: _a0
func (_m *IRepository) LoginUser(_a0 user.LoginUserDTO) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(user.LoginUserDTO) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: _a0
func (_m *IRepository) RegisterUser(_a0 user.RegisterUserDTO) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(user.RegisterUserDTO) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
